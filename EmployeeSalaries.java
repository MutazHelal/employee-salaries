/*
 * Mutaz Helal
 * May 20
 * EmployeeSalaries
 * To demonstrate concepts learned in ICS4U in one program.
 */

import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import nu.xom.Builder;
import nu.xom.Document;
import nu.xom.Element;
import nu.xom.Elements;
import nu.xom.ParsingException;

public class EmployeeSalaries extends javax.swing.JFrame {

    ArrayList<EmployeeData> employeeList = new ArrayList<>();
    static int countList = 0;
    static int countSalaryList = 0;
    static int countSort = 0;
    static int countExport = 0;

    /**
     * Creates new form EmployeeSalaries
     */
    public EmployeeSalaries() {
        initComponents();

        //call getTemperature() to display the current temperature
        try {
            getTemperature();
        } catch (ParsingException | IOException ex) {
            Logger.getLogger(EmployeeSalaries.class.getName())
                    .log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fullNameIn = new javax.swing.JTextField();
        rateIn = new javax.swing.JTextField();
        weekIn1 = new javax.swing.JTextField();
        weekIn2 = new javax.swing.JTextField();
        weekIn3 = new javax.swing.JTextField();
        weekIn4 = new javax.swing.JTextField();
        employeeScrollPane = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        salaryScrollPane = new javax.swing.JScrollPane();
        salaryTable = new javax.swing.JTable();
        add = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        list = new javax.swing.JButton();
        search = new javax.swing.JButton();
        sort = new javax.swing.JButton();
        listSalary = new javax.swing.JButton();
        export = new javax.swing.JButton();
        successLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        weather = new javax.swing.JLabel();
        degree = new javax.swing.JLabel();
        employeeSalariesGFX = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(975, 640));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fullNameIn.setBackground(new java.awt.Color(255, 236, 83));
        fullNameIn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        fullNameIn.setForeground(new java.awt.Color(75, 75, 75));
        fullNameIn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fullNameIn.setBorder(null);
        fullNameIn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fullNameInKeyPressed(evt);
            }
        });
        getContentPane().add(fullNameIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 170, 20));

        rateIn.setBackground(new java.awt.Color(255, 236, 83));
        rateIn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        rateIn.setForeground(new java.awt.Color(75, 75, 75));
        rateIn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rateIn.setBorder(null);
        rateIn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rateInKeyPressed(evt);
            }
        });
        getContentPane().add(rateIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, 110, 20));

        weekIn1.setBackground(new java.awt.Color(255, 236, 83));
        weekIn1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        weekIn1.setForeground(new java.awt.Color(75, 75, 75));
        weekIn1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        weekIn1.setBorder(null);
        weekIn1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                weekIn1KeyPressed(evt);
            }
        });
        getContentPane().add(weekIn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 210, 70, 20));

        weekIn2.setBackground(new java.awt.Color(255, 236, 83));
        weekIn2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        weekIn2.setForeground(new java.awt.Color(75, 75, 75));
        weekIn2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        weekIn2.setBorder(null);
        weekIn2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                weekIn2KeyPressed(evt);
            }
        });
        getContentPane().add(weekIn2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 210, 70, 20));

        weekIn3.setBackground(new java.awt.Color(255, 236, 83));
        weekIn3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        weekIn3.setForeground(new java.awt.Color(75, 75, 75));
        weekIn3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        weekIn3.setBorder(null);
        weekIn3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                weekIn3KeyPressed(evt);
            }
        });
        getContentPane().add(weekIn3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 300, 80, 20));

        weekIn4.setBackground(new java.awt.Color(255, 236, 83));
        weekIn4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        weekIn4.setForeground(new java.awt.Color(75, 75, 75));
        weekIn4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        weekIn4.setBorder(null);
        weekIn4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                weekIn4KeyPressed(evt);
            }
        });
        getContentPane().add(weekIn4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 300, 80, 20));

        employeeScrollPane.setBackground(new java.awt.Color(255, 236, 83));
        employeeScrollPane.setForeground(new java.awt.Color(75, 75, 75));

        employeeTable.setBackground(new java.awt.Color(75, 75, 75));
        employeeTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        employeeTable.setForeground(new java.awt.Color(255, 236, 83));
        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Full Name", "Week 1", "Week 2", "Week 3", "Week 4", "$/hr"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        employeeTable.setGridColor(new java.awt.Color(255, 255, 255));
        employeeTable.getTableHeader().setReorderingAllowed(false);
        employeeScrollPane.setViewportView(employeeTable);
        if (employeeTable.getColumnModel().getColumnCount() > 0) {
            employeeTable.getColumnModel().getColumn(0).setPreferredWidth(155);
        }

        getContentPane().add(employeeScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 470, 160));

        salaryScrollPane.setBackground(new java.awt.Color(255, 236, 83));
        salaryScrollPane.setForeground(new java.awt.Color(75, 75, 75));

        salaryTable.setBackground(new java.awt.Color(75, 75, 75));
        salaryTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        salaryTable.setForeground(new java.awt.Color(255, 236, 83));
        salaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Full Name", "Before Taxes", "After Taxes"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        salaryTable.setOpaque(false);
        salaryTable.getTableHeader().setReorderingAllowed(false);
        salaryScrollPane.setViewportView(salaryTable);
        if (salaryTable.getColumnModel().getColumnCount() > 0) {
            salaryTable.getColumnModel().getColumn(0).setResizable(false);
            salaryTable.getColumnModel().getColumn(0).setPreferredWidth(130);
        }

        getContentPane().add(salaryScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 350, 340, 160));

        add.setBackground(new java.awt.Color(255, 236, 83));
        add.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        add.setForeground(new java.awt.Color(75, 75, 75));
        add.setText("Add Employee");
        add.setBorder(null);
        add.setBorderPainted(false);
        add.setFocusable(false);
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        getContentPane().add(add, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 240, 140, 30));

        clear.setBackground(new java.awt.Color(230, 41, 49));
        clear.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        clear.setForeground(new java.awt.Color(255, 255, 255));
        clear.setText("Clear Data");
        clear.setBorder(null);
        clear.setBorderPainted(false);
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        getContentPane().add(clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 440, 90, 30));

        list.setBackground(new java.awt.Color(255, 236, 83));
        list.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        list.setForeground(new java.awt.Color(75, 75, 75));
        list.setText("List Employees");
        list.setBorder(null);
        list.setBorderPainted(false);
        list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listActionPerformed(evt);
            }
        });
        getContentPane().add(list, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 520, 120, 30));

        search.setBackground(new java.awt.Color(255, 236, 83));
        search.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        search.setForeground(new java.awt.Color(75, 75, 75));
        search.setText("Search");
        search.setBorder(null);
        search.setBorderPainted(false);
        search.setFocusable(false);
        search.setRequestFocusEnabled(false);
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 240, 80, 30));

        sort.setBackground(new java.awt.Color(255, 236, 83));
        sort.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        sort.setForeground(new java.awt.Color(75, 75, 75));
        sort.setText("Sort Data");
        sort.setBorder(null);
        sort.setBorderPainted(false);
        sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortActionPerformed(evt);
            }
        });
        getContentPane().add(sort, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 390, 90, 30));

        listSalary.setBackground(new java.awt.Color(255, 236, 83));
        listSalary.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        listSalary.setForeground(new java.awt.Color(75, 75, 75));
        listSalary.setText("List Salaries");
        listSalary.setBorder(null);
        listSalary.setBorderPainted(false);
        listSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listSalaryActionPerformed(evt);
            }
        });
        getContentPane().add(listSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 520, 100, 30));

        export.setBackground(new java.awt.Color(255, 236, 83));
        export.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        export.setForeground(new java.awt.Color(75, 75, 75));
        export.setText("Export Table");
        export.setBorder(null);
        export.setBorderPainted(false);
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });
        getContentPane().add(export, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 520, 100, 30));

        successLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        successLabel.setForeground(new java.awt.Color(0, 204, 51));
        successLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(successLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 560, 850, 20));

        errorLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 76, 84));
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(errorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 560, 850, 20));

        weather.setFont(new java.awt.Font("Arial", 1, 45)); // NOI18N
        weather.setForeground(new java.awt.Color(75, 75, 75));
        getContentPane().add(weather, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 60, 60, 70));

        degree.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        degree.setForeground(new java.awt.Color(75, 75, 75));
        getContentPane().add(degree, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 70, 30, 30));

        employeeSalariesGFX.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EmployeeSalariesGFX.png"))); // NOI18N
        getContentPane().add(employeeSalariesGFX, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 960, 600));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        //format output
        clearOut();

        // initialize variables and set values
        EmployeeData employee;
        boolean emptyName = fullNameIn.getText().trim().isEmpty();
        Double rate, weekA, weekB, weekC, weekD, monthSum, yearSum;
        String fullName, name, name2;

        //check if string inputs are empty
        if (emptyName) {
            successLabel.setText("");
            errorLabel.setText("Please enter the employee's full name.");
            fullNameIn.setText("");
            fullNameIn.requestFocus();

            //validate hour inputs
        } else {
            try {
                rate = Double.parseDouble(rateIn.getText());
            } catch (NumberFormatException h) {
                successLabel.setText("");
                errorLabel.setText("Hourly rate entered is invalid.");
                rateIn.setText("");
                rateIn.requestFocus();
                return;
            }
            //week 1
            try {
                weekA = Double.parseDouble(weekIn1.getText());
            } catch (NumberFormatException e) {
                successLabel.setText("");
                errorLabel.setText("Week 1 hours entered are"
                        + " invalid.");
                weekIn1.setText("");
                weekIn1.requestFocus();
                return;
            }
            //week 2
            try {
                weekB = Double.parseDouble(weekIn2.getText());
            } catch (NumberFormatException f) {
                successLabel.setText("");
                errorLabel.setText("Week 2 hours entered are invalid.");
                weekIn2.setText("");
                weekIn2.requestFocus();
                return;
            }
            //week 3
            try {
                weekC = Double.parseDouble(weekIn3.getText());
            } catch (NumberFormatException g) {
                successLabel.setText("");
                errorLabel.setText("Week 3 hours entered are invalid.");
                weekIn3.setText("");
                weekIn3.requestFocus();
                return;
            }
            //week 4
            try {
                weekD = Double.parseDouble(weekIn4.getText());
            } catch (NumberFormatException h) {
                successLabel.setText("");
                errorLabel.setText("Week 4 hours entered are invalid.");
                weekIn4.setText("");
                weekIn4.requestFocus();
                return;
            }
            //get validated name input
            fullName = fullNameIn.getText();
            name = fullNameIn.getText().toLowerCase();

            //check if the entered name is already on the list
            for (int i = 0; i < employeeList.size(); i++) {
                name2 = String.valueOf(employeeList.get(i).fullName)
                        .toLowerCase();
                //display error
                if (name2.equals(name)) {
                    clearFields();
                    successLabel.setText("");
                    errorLabel.setText(fullName 
                            + "'s data is already entered.");
                    return;
                }
            }

            //calculate salary assuming 52 weeks in a year
            monthSum = (weekA + weekB + weekC + weekD) * rate;
            yearSum = (monthSum * 13);

            //calculate salary after taxes
            double taxedSalary = calculateTaxes(yearSum);

            //assign values to obeject elements
            Double week1 = Double.parseDouble(weekIn1.getText());
            Double week2 = Double.parseDouble(weekIn2.getText());
            Double week3 = Double.parseDouble(weekIn3.getText());
            Double week4 = Double.parseDouble(weekIn4.getText());
            Double hourRate = rate;
            Double beforeTaxes = yearSum;
            Double afterTaxes = taxedSalary;

            //add object elements to the array
            employee = new EmployeeData(fullName, hourRate,
                    week1, week2, week3, week4, beforeTaxes, afterTaxes);
            employeeList.add(employee);

            //format output
            errorLabel.setText("");
            successLabel.setText(fullName + " "
                    + "'s hours have been added! ");

            clearFields();
            countSort = 0;

            employeeTable.setVisible(false);
            salaryTable.setVisible(false);
        }


    }//GEN-LAST:event_addActionPerformed

    private void listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listActionPerformed
        //format output
        DecimalFormat twoDigits = new DecimalFormat("0.00");
        clearOut();

        //initialize and declare variable values
        DefaultTableModel employee = (DefaultTableModel) employeeTable
                .getModel();
        Object rowData[] = new Object[6];
        employeeTable.setVisible(true);

        //check if data has been cleared by user
        if (0 == employeeList.size()) {
            //format output
            successLabel.setText("");
            errorLabel.setText("There is no data to list.");
            fullNameIn.requestFocus();

            //check for redundant list request
        } else if (countList == employeeList.size()) {
            //display error message
            successLabel.setText("");
            errorLabel.setText("No other employees have been entered in"
                    + " the list.");

        } else {
            //add stored data to the table
            for (int i = countList; i < employeeList.size(); i++) {
                rowData[0] = employeeList.get(i).fullName;
                rowData[1] = employeeList.get(i).week1 + " hrs";
                rowData[2] = employeeList.get(i).week2 + " hrs";
                rowData[3] = employeeList.get(i).week3 + " hrs";
                rowData[4] = employeeList.get(i).week4 + " hrs";
                rowData[5] = "$" + twoDigits.format(employeeList
                        .get(i).hourRate);
                employee.addRow(rowData);
                countList = i + 1;

            }
            errorLabel.setText("");
            successLabel.setText("Data successfuly listed!");
        }

    }//GEN-LAST:event_listActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        //format output
        clearOut();

        // variable declaration and initialization
        String name = fullNameIn.getText().toLowerCase();
        String name2;
        DecimalFormat twoDigits = new DecimalFormat("0.00");

        twoDigits.setGroupingUsed(true);
        twoDigits.setGroupingSize(3);

        DefaultTableModel salary = (DefaultTableModel) salaryTable.getModel();
        Object rowData2[] = new Object[3];

        //validate input
        if (employeeList.isEmpty() == true) {
            successLabel.setText("");
            errorLabel.setText("There is no data to search.");
            fullNameIn.requestFocus();

        } else {
            //get stored names from array
            for (int i = 0; i < employeeList.size(); i++) {
                name2 = String.valueOf(employeeList.get(i).fullName)
                        .toLowerCase();

                //check if entered name is in the list
                if (name2.equals(name)) {
                    salaryTable.setVisible(true);

                    //empty table
                    for (int j = salary.getRowCount() - 1; j >= 0; j--) {
                        salary.removeRow(j);
                    }
                    //retrieve objects from array and add to table
                    rowData2[0] = employeeList.get(i).fullName;
                    rowData2[1] = "$" + twoDigits.format(employeeList
                            .get(i).beforeTaxes);
                    rowData2[2] = "$" + twoDigits.format(employeeList
                            .get(i).afterTaxes);
                    salary.addRow(rowData2);

                    //format output
                    errorLabel.setText("");
                    fullNameIn.setText("");

                    successLabel.setText("Employee data has been generated!");
                    fullNameIn.requestFocus();
                    countSalaryList = 0;
                    return;

                    //format output and display error
                } else {

                    fullNameIn.setText("");

                    successLabel.setText("");
                    errorLabel.setText("Enter an employee's full name "
                            + "that is on the list, then click \"Search\".");
                    fullNameIn.requestFocus();
                }

            }
        }

    }//GEN-LAST:event_searchActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        //get tables
        DefaultTableModel employee = (DefaultTableModel) employeeTable
                .getModel();
        DefaultTableModel salary = (DefaultTableModel) salaryTable.getModel();

        //check if the data is already clear
        if (employeeList.isEmpty() == true) {
            successLabel.setText("");
            errorLabel.setText("There is no data to clear.");
            fullNameIn.requestFocus();

            //confirm that the user wishes to clear data
        } else {
            int YesOrNo = JOptionPane.showConfirmDialog(null,
                    "Are you sure you wish to clear all employee data?",
                    "Confirmation",
                    JOptionPane.YES_NO_OPTION);

            //clear all data and format output
            if (YesOrNo == 0) {
                employeeList.clear();

                for (int i = employee.getRowCount() - 1; i >= 0; i--) {
                    employee.removeRow(i);
                }
                for (int i = salary.getRowCount() - 1; i >= 0; i--) {
                    salary.removeRow(i);
                }

                countList = 0;
                countSalaryList = 0;
                countSort = 0;

                employeeTable.setVisible(false);
                salaryTable.setVisible(false);

                errorLabel.setText("");
                successLabel.setText("All data has been cleared!");

                //tell the user that the process has been aborted
            } else {
                errorLabel.setText("");
                successLabel.setText("Successfully aborted!");
            }
        }
    }//GEN-LAST:event_clearActionPerformed

    private void sortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortActionPerformed
        //get table
        DefaultTableModel employee = (DefaultTableModel) employeeTable
                .getModel();
        DefaultTableModel salary = (DefaultTableModel) salaryTable.getModel();

        //check if the data is already clear
        if (employeeList.isEmpty() == true) {
            successLabel.setText("");
            errorLabel.setText("There is no data to sort.");
            fullNameIn.requestFocus();

            //check for redundant sort
        } else if (countSort > 0) {
            errorLabel.setText("The data is already sorted.");
            successLabel.setText("");

            //clear table
        } else {
            for (int i = employee.getRowCount() - 1; i >= 0; i--) {
                employee.removeRow(i);
            }
            for (int i = salary.getRowCount() - 1; i >= 0; i--) {
                salary.removeRow(i);
            }
            //sort the data
            Collections.sort(employeeList);

            //format output
            employeeTable.setVisible(false);
            salaryTable.setVisible(false);

            errorLabel.setText("");
            successLabel.setText("The data has been sorted successfuly!");

            countList = 0;
            countSalaryList = 0;
            countSort++;
        }
    }//GEN-LAST:event_sortActionPerformed

    private void listSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listSalaryActionPerformed
        //format output
        clearOut();
        DecimalFormat twoDigits = new DecimalFormat("00.00");
        twoDigits.setGroupingUsed(true);
        twoDigits.setGroupingSize(3);

        //initialize and declare variable values
        DefaultTableModel salary = (DefaultTableModel) salaryTable.getModel();
        Object rowData2[] = new Object[3];
        salaryTable.setVisible(true);

        //validate user input
        if (0 == employeeList.size()) {
            //display error
            successLabel.setText("");
            errorLabel.setText("There are no employee's to list.");
            fullNameIn.requestFocus();

            //check for redundant list request
        } else if (countSalaryList == employeeList.size()) {
            //display error message
            successLabel.setText("");
            errorLabel.setText("No other employees have been entered in"
                    + " the list.");

        } else {
            //clear table
            for (int i = salary.getRowCount() - 1; i >= 0; i--) {
                salary.removeRow(i);
            }
            //add stored data to the table
            for (int i = countSalaryList; i < employeeList.size(); i++) {
                rowData2[0] = employeeList.get(i).fullName;
                rowData2[1] = "$" + twoDigits.format(employeeList
                        .get(i).beforeTaxes);
                rowData2[2] = "$" + twoDigits.format(employeeList
                        .get(i).afterTaxes);
                salary.addRow(rowData2);
                countSalaryList = i + 1;
            }
            errorLabel.setText("");
            successLabel.setText("Salary data has been successfuly listed!");
            
            countExport = 0;
        }
    }//GEN-LAST:event_listSalaryActionPerformed

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        //initialize
        int checkRow = salaryTable.getModel().getRowCount();

        //check if there is no data
        if (employeeList.isEmpty() == true) {
            successLabel.setText("");
            errorLabel.setText("There is no data to export.");

            //check if the salary table is empty
        } else if (checkRow == 0) {
            successLabel.setText("");
            errorLabel.setText("There is no data on the table.");

            //check for redundant export request
        } else if (countExport > 0) {
            successLabel.setText("");
            errorLabel.setText("There is no new data to export.");
        } else {

            //create file data.txt
            try {
                OutputStream fout = new FileOutputStream("data.txt");
                OutputStream bout = new BufferedOutputStream(fout);
                try (OutputStreamWriter out = new OutputStreamWriter(bout)) {
                    out.write("+------------------------+----------------------"
                            + "--+------------------------+\n|         Name    "
                            + "       |      Before Taxes      |      After Tax"
                            + "es       |\n+------------------------+----------"
                            + "--------------+------------------------+\n");

                    //loop through salary table and copy elemetns to file
                    for (int i = 0; i < salaryTable.getRowCount(); i++) {
                        for (int j = 0; j < salaryTable.getColumnCount(); j++) {
                            out.write(String.format("%-25s", "|"
                                    + salaryTable.getModel().getValueAt(i, j)));
                        }
                        //break line
                        out.write("|" + "\n+------------------------+----------"
                                + "--------------+------------------------+\n");
                    }
                    out.flush();
                    out.close();
                }
                //tell user that the data has been exported
                errorLabel.setText("");
                successLabel.setText("Table data has been successfuly "
                        + "exported!");
                countExport++;

                //catch exceptions and display errors
            } catch (UnsupportedEncodingException e) {
                successLabel.setText("");
                errorLabel.setText(
                        "This VM does not support the Latin-1 character set."
                );
            } catch (IOException e) {
                successLabel.setText("");
                errorLabel.setText(e.getMessage());
            }
        }
    }//GEN-LAST:event_exportActionPerformed

    private void fullNameInKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fullNameInKeyPressed
        clearOut();
    }//GEN-LAST:event_fullNameInKeyPressed

    private void rateInKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rateInKeyPressed
        clearOut();
    }//GEN-LAST:event_rateInKeyPressed

    private void weekIn1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weekIn1KeyPressed
        clearOut();
    }//GEN-LAST:event_weekIn1KeyPressed

    private void weekIn2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weekIn2KeyPressed
        clearOut();
    }//GEN-LAST:event_weekIn2KeyPressed

    private void weekIn3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weekIn3KeyPressed
        clearOut();
    }//GEN-LAST:event_weekIn3KeyPressed

    private void weekIn4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weekIn4KeyPressed
        clearOut();
    }//GEN-LAST:event_weekIn4KeyPressed

    public void clearOut() {
        //clear outputs
        errorLabel.setText("");
        successLabel.setText("");
    }

    public void clearFields() {
        fullNameIn.requestFocus();
        fullNameIn.setText("");
        rateIn.setText("");
        weekIn1.setText("");
        weekIn2.setText("");
        weekIn3.setText("");
        weekIn4.setText("");
    }

    public double calculateTaxes(double salary) {
        //initialize variable
        double taxAmount = 0;

        /*calculate taxes based on Canada Federal Income Tax Brackets 2019
         for reference: https://tinyurl.com/y774uyvg */
        if (salary <= 47630.00) {
            taxAmount = salary * 0.85;

        } else if (salary > 47630.00 && salary <= 95259.00) {
            taxAmount = ((salary - 7145.00) - ((salary - 47630.00) * 0.205));

        } else if (salary > 95259.00 && salary <= 147667.00) {
            taxAmount = ((salary - 16908.00) - ((salary - 95259.00) * 0.26));

        } else if (salary > 147667.00 && salary <= 210371.00) {
            taxAmount = ((salary - 30535.00) - ((salary - 147667.00) * 0.29));

        } else if (salary > 210371.00) {
            taxAmount = ((salary - 48719.00) - ((salary - 210371.00) * 0.33));
        }
        return taxAmount;
    }

    public void getTemperature() throws ParsingException, IOException {
        // get the XML document from the web
        Builder builder = new Builder();
        Document doc = builder.build("https://tinyurl.com/y827e3dh");

        //get current temperature in celcius
        Element root = doc.getRootElement();
        Element forecast = root.getFirstChildElement("forecast");
        Elements days = forecast.getChildElements("time");
        Element day = days.get(0);
        Element temperature = day.getFirstChildElement("temperature");
        String dayTemp = temperature.getAttribute("day").getValue();

        //output the temperature
        weather.setText(String.valueOf((Math.round(Double.valueOf(dayTemp)))));
        degree.setText("°C");

    }

    public class EmployeeData implements Comparable<EmployeeData> {

        //initialize variables
        private String fullName;
        private double afterTaxes, hourRate, beforeTaxes, week1, week2,
                week3, week4;

        //set up comparable
        public double getAnnual() {
            return this.afterTaxes;
        }

        public void setAnnual(int ranking) {
            this.afterTaxes = ranking;
        }

        //initialize the object with employee elements
        EmployeeData(String fullName, Double hourRate, Double week1,
                Double week2, Double week3, Double week4,
                Double beforeTaxes, Double afterTaxes) {

            this.fullName = fullName;
            this.hourRate = hourRate;
            this.week1 = week1;
            this.week2 = week2;
            this.week3 = week3;
            this.week4 = week4;
            this.beforeTaxes = beforeTaxes;
            this.afterTaxes = afterTaxes;
        }

        //define how the object array should be sorted
        @Override
        public int compareTo(EmployeeData other) {
            return (int) (other.getAnnual() - this.getAnnual());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeSalaries.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new EmployeeSalaries().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton clear;
    private javax.swing.JLabel degree;
    private javax.swing.JLabel employeeSalariesGFX;
    private javax.swing.JScrollPane employeeScrollPane;
    private javax.swing.JTable employeeTable;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton export;
    private javax.swing.JTextField fullNameIn;
    private javax.swing.JButton list;
    private javax.swing.JButton listSalary;
    private javax.swing.JTextField rateIn;
    private javax.swing.JScrollPane salaryScrollPane;
    private javax.swing.JTable salaryTable;
    private javax.swing.JButton search;
    private javax.swing.JButton sort;
    private javax.swing.JLabel successLabel;
    private javax.swing.JLabel weather;
    private javax.swing.JTextField weekIn1;
    private javax.swing.JTextField weekIn2;
    private javax.swing.JTextField weekIn3;
    private javax.swing.JTextField weekIn4;
    // End of variables declaration//GEN-END:variables
}
